#!/bin/bash
# Last mod 20110401

# Configura l'ambiente
source /etc/profile

# Set the software environment
export PROMETEO_ROOT=$HOME/prometeo/
. $PROMETEO_ROOT/etc/profile

cd $NCEPDOWNLOADER_ROOT

# Nome della script
MYNAME=$0

# Numero di file da scaricare
declare -i nFilesToCheck

# Numero di file scaricati
declare -i nFiles


doLog()
{
  local strDate=`date -u +"%d/%m/%Y %H:%M:%S"`
  echo "[$MYNAME] $strDate : $1"
}

doLog "---- sNCEPder started ----"


WORKING_DIR=$PROMETEO_ROOT/downloaders/shinNCEPDownloader2
TEMP_DIR=$WORKING_DIR/tmp
DATASET_FILE=dateset.log
LOCK_FILE=lock.file

productBaseUrl="ftp://ftpprd.ncep.noaa.gov/pub/data/nccf/com/gfs/prod/"
#hours="00 06 12 18 24 30 36 42 48 54 60 66 72 78 84 90 96 102 108 114 120 126 132 138 144 150 156 162 168 174 180 186 192"

# Download 3h steps
hours=""
for ((a=0; a <= 192 ; a=a+3))
do
   hour=$a
   if [ $a -lt 10 ];
   then
     hour="0$hour"
   fi
   hours="$hours $hour"
done

# Path locale
BASE_PATH=$PROMETEO_ROOT/data/ncep


# Imposta la directory corrente
cd $WORKING_DIR

# Controlla se il lock file esiste
if [ -e $LOCK_FILE ]
then

  # Il lock file esiste
  doLog "Downloader yet runnng!"

else

  # Crea il lock file
  echo 1 > $LOCK_FILE

  # Ricava la data in formato ddmmmyyyy
  DATE=`date -u +%d%b%Y | tr '[A-Z]' '[a-z]'`

  # Ricava la data in formato DSA yyyymmdd
  DSADATE=`date -u +%Y%m%d`

  # Controlla se esiste la directory
  if [ ! -e $BASE_PATH/$DSADATE ]
  then
    # La directory non esiste e va creata
    mkdir $BASE_PATH/$DSADATE
    doLog "Created the $BASE_PATH/$DSADATE directory"
  fi

  nowHour=`date -u +%H`

  inits="00 06 12 18"
  for init in $inits
  do
    if [ $nowHour -ge $init ]
    then

      # Ricava la data in formato NCEP hhZddmmmyyyy
      NCEPDATE=${init}Z$DATE

      # Ricava la data in formato DSA con cora sinottica yyyymmddZhh
      DATEZHOUR=${DSADATE}Z${init}

      # Controlla se i dati sono stati già scaricati
      if grep -q $DATEZHOUR $DATASET_FILE
      then
        # I dati sono stati già scaricati
        doLog "$NCEPDATE yet downloaded."
      else
        # Controlla se i dati sono disponibili
        doLog "Checking t${init} products..."
        file="prdst_${init}_UTC_GFS.html"
        if [ -e $file ]
        then
          rm $file
        fi

        #wget -q $baseUrl/$file
        gfsDir=gfs.${DSADATE}/${init}
        ftpProductUrl=$productBaseUrl/$gfsDir/
        doLog "Check: $ftpProductUrl on $file"
        curl -s -o $file $ftpProductUrl 2>&1
        if [ -e $file ]
        then
          rm $file
        fi

        #wget -q $baseUrl/$file
        gfsDir=gfs.${DSADATE}/${init}
        ftpProductUrl=$productBaseUrl/$gfsDir/
        doLog "Check: $ftpProductUrl on $file"
        curl -s -o $file $ftpProductUrl 2>&1
        if [ -e $file ]
        then
          #lineCount=`cat $file | grep COMPLETE | wc -l`
          #if [ $lineCount -eq 11 ]
          #doLog "Perform the check on $file"
          #avCheck=`grep Index $file`
          #doLog "Result: $avCheck"
          #doLog "----------------"
          #if [ "$avCheck" != "" ];
          #then
            # Ricava il percorso locale
            LOCAL_PATH=$BASE_PATH/$DSADATE/$DATEZHOUR

            # Controlla se la directory esiste
            if [ ! -e $LOCAL_PATH ]
            then
              # La directory non esiste e va creata
              mkdir $LOCAL_PATH
              doLog "Created the $LOCAL_PATH directory"
            fi

            # I dati sono disponibili
            doLog "Downloading $NCEPDATE in $LOCAL_PATH..."

            cd $LOCAL_PATH
            nFilesToCheck=0
            for hour in $hours
            do
              if [ $hour -lt 100 ]
              then
                hour30="0$hour"
              else
                hour30=$hour
              fi

              # ftp://ftpprd.ncep.noaa.gov/pub/data/nccf/com/gfs/prod//gfs.2015011500/gfs.t00z.pgrb2b.0p25.f000
              #fileToDownload="gfs.t${init}z.pgrbf$hour.grib2"
              #fileToDownload="gfs.t${init}z.pgrb2.0p25.f$hour30"
              fileToDownload="gfs.t${init}z.pgrb2.0p50.f$hour30"

              #fileUrl="$productBaseUrl/gfs.${DSADATE}${init}/$fileToDownload"
              fileUrl="$ftpProductUrl/$fileToDownload"

              localFile="gfs.t${init}z.pgrbf$hour30.grib2"

              doLog "fileUrl:$fileUrl localFile:$localFile"

              rm $fileToDownload 2>/dev/null

              wget -q  $fileUrl
              if [ -e $fileToDownload ]
              then
                mv -f $fileToDownload $localFile
              fi
              nFilesToCheck=$nFilesToCheck+1
            done

            cd $WORKING_DIR

            nFiles=0

            # Per ognuna delle ore richieste...
            for hour in $hours
            do
              # Controlla se il file e' stato scaricato
              if [ $hour -lt 100 ]
              then
                hour30="0$hour"
              else
                hour30=$hour
              fi
              localFile="gfs.t${init}z.pgrbf$hour30.grib2"

              FILETOCHECK="$BASE_PATH/$DSADATE/$DATEZHOUR/$localFile"
              if [ -e $FILETOCHECK ]
              then
                # Il file e' stato scaricato
                doLog "$FILETOCHECK [OK]"

                # Incrementa il contatore dei file scaricati
                nFiles=$nFiles+1
              else
                # Il file non e' stato scaricato
                doLog "$FILETOCHECK [FAIL]"
              fi
            done

            # Controlla se sono stati scaricati tutti i file
            if [ $nFiles == $nFilesToCheck ]
            then
              # Tutti i file sono stati scricati correttamente
              doLog "All files downloaded correctly!"

              # Aggiorna il catalogo dei dati
              cat >> $DATASET_FILE << EOF
$DATEZHOUR
EOF
              # Controlla se il gestore dell'evento e' presente
              if [ -e onDownloadCompleted ]
              then
                # Il gestore risulta definito
                doLog "Invoking onDownloadCompleted $DSADATE $init"

                # Invoca il gestore dell'evento - non bloccante
                ssh localhost /home/ccmmma/prometeo/downloaders/shinNCEPDownloader2/onDownloadCompleted $DSADATE $init &
              else
                # Il gestore non risulta definito
                doLog "onDownloadCompleted not defined"
              fi
            else
              # Non tutti i file sono sono stati scaricati
              doLog "Downloaded ($nFiles) and to be download ($nFilesToCheck) files count doesn't match!"
            fi
                      #else
          #  doLog "++++"
          #  availStatus=`echo "scale=1; 100*$lineCount/11"|bc -l`
          #  doLog "++++"
          #  doLog "- Not yet available: $availStatus % completed."
          #fi
        else
          doLog "- Troubles with the web page"
        fi
      fi
    fi
  done

  # Rimuove il file di lock
  rm $LOCK_FILE
fi

doLog "---- sNCEPder ended ----"
